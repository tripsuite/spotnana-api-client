/**
 * Trip API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AirlineInfo } from './airlineInfo';
import { CreditStatus } from './creditStatus';
import { DateTimeOffset } from './dateTimeOffset';
import { Money } from './money';
import { Name } from './name';
import { ThirdPartySource } from './thirdPartySource';

/**
* Information regarding an unused credit.
*/
export class UnusedCreditInfo {
    /**
    * PNR number corresponding to third party through which booking was made.
    */
    'sourcePnr'?: string;
    /**
    * Spotnana pnr ID.
    */
    'spotnanaPnr'?: string;
    /**
    * Ticket number for the ticket that was converted into an unused credit.
    */
    'ticketNumber'?: string;
    /**
    * 2 letter airline code of the airline associated with this unused credit.
    */
    'airlineCode'?: string;
    /**
    * Airline info with airline name and code
    */
    'airlineInfo'?: AirlineInfo;
    /**
    * Total airfare associated with the original ticket.
    */
    'totalFare'?: Money;
    /**
    * Issue date for the unused credit.
    */
    'issueDate'?: DateTimeOffset;
    /**
    * Expiry date for the unused credit.
    */
    'expiryDate'?: DateTimeOffset;
    /**
    * Date on which the unused credit was used.
    */
    'usedDate'?: DateTimeOffset;
    /**
    * Date for the departure of the first flight associated with the unused credit.
    */
    'departureDate'?: DateTimeOffset;
    /**
    * Whether all segments are unused or some have already been used.
    */
    'segmentsAvailable'?: UnusedCreditInfo.SegmentsAvailableEnum;
    /**
    * Name of the passenger associated with the credit.
    */
    'passengerName'?: Name;
    /**
    * 3 letter country code of the departure country associated with the original ticket.
    */
    'departureCountry'?: string;
    /**
    * 3 letter country code of the arrival country associated with the original ticket.
    */
    'arrivalCountry'?: string;
    /**
    * Type of credit.
    */
    'ticketType'?: UnusedCreditInfo.TicketTypeEnum;
    /**
    * PCC the credit was issued on.
    */
    'pcc'?: string;
    'status'?: CreditStatus;
    /**
    * Source of unused credit e.g. Sabre, NDC etc.
    */
    'source'?: ThirdPartySource;
    /**
    * Trip ID that contains the unused credit
    */
    'tripId'?: string;
    /**
    * The way credit can be redeemed.
    */
    'redeemVia'?: UnusedCreditInfo.RedeemViaEnum;
    /**
    * The system that owns the credit.
    */
    'sourceOfTruth'?: UnusedCreditInfo.SourceOfTruthEnum;
    /**
    * PCC the PNR was created on.
    */
    'owningPcc'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourcePnr",
            "baseName": "sourcePnr",
            "type": "string"
        },
        {
            "name": "spotnanaPnr",
            "baseName": "spotnanaPnr",
            "type": "string"
        },
        {
            "name": "ticketNumber",
            "baseName": "ticketNumber",
            "type": "string"
        },
        {
            "name": "airlineCode",
            "baseName": "airlineCode",
            "type": "string"
        },
        {
            "name": "airlineInfo",
            "baseName": "airlineInfo",
            "type": "AirlineInfo"
        },
        {
            "name": "totalFare",
            "baseName": "totalFare",
            "type": "Money"
        },
        {
            "name": "issueDate",
            "baseName": "issueDate",
            "type": "DateTimeOffset"
        },
        {
            "name": "expiryDate",
            "baseName": "expiryDate",
            "type": "DateTimeOffset"
        },
        {
            "name": "usedDate",
            "baseName": "usedDate",
            "type": "DateTimeOffset"
        },
        {
            "name": "departureDate",
            "baseName": "departureDate",
            "type": "DateTimeOffset"
        },
        {
            "name": "segmentsAvailable",
            "baseName": "segmentsAvailable",
            "type": "UnusedCreditInfo.SegmentsAvailableEnum"
        },
        {
            "name": "passengerName",
            "baseName": "passengerName",
            "type": "Name"
        },
        {
            "name": "departureCountry",
            "baseName": "departureCountry",
            "type": "string"
        },
        {
            "name": "arrivalCountry",
            "baseName": "arrivalCountry",
            "type": "string"
        },
        {
            "name": "ticketType",
            "baseName": "ticketType",
            "type": "UnusedCreditInfo.TicketTypeEnum"
        },
        {
            "name": "pcc",
            "baseName": "pcc",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "CreditStatus"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "ThirdPartySource"
        },
        {
            "name": "tripId",
            "baseName": "tripId",
            "type": "string"
        },
        {
            "name": "redeemVia",
            "baseName": "redeemVia",
            "type": "UnusedCreditInfo.RedeemViaEnum"
        },
        {
            "name": "sourceOfTruth",
            "baseName": "sourceOfTruth",
            "type": "UnusedCreditInfo.SourceOfTruthEnum"
        },
        {
            "name": "owningPcc",
            "baseName": "owningPcc",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UnusedCreditInfo.attributeTypeMap;
    }
}

export namespace UnusedCreditInfo {
    export enum SegmentsAvailableEnum {
        Unknown = <any> 'UNKNOWN',
        AllOpen = <any> 'ALL_OPEN',
        Partial = <any> 'PARTIAL',
        Other = <any> 'OTHER'
    }
    export enum TicketTypeEnum {
        TicketTypeUnknown = <any> 'TICKET_TYPE_UNKNOWN',
        Eticket = <any> 'ETICKET',
        Mco = <any> 'MCO',
        NonGds = <any> 'NON_GDS'
    }
    export enum RedeemViaEnum {
        RedeemViaObt = <any> 'REDEEM_VIA_OBT',
        ContactAgent = <any> 'CONTACT_AGENT'
    }
    export enum SourceOfTruthEnum {
        Spotnana = <any> 'SPOTNANA',
        ManualForm = <any> 'MANUAL_FORM'
    }
}
