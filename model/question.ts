/**
 * Trip API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CustomFieldLocation } from './customFieldLocation';
import { CustomFieldMatchConditions } from './customFieldMatchConditions';
import { OptionInfo } from './optionInfo';
import { QuestionFormat } from './questionFormat';
import { QuestionType } from './questionType';

/**
* The message defines the format of a question which can be asked to a user in any kind of workflows.
*/
export class Question {
    'id': string;
    /**
    * Question display name that the user will see. For eg, \'Choose the purpose of your trip\'.
    */
    'name': string;
    'questionFormat'?: QuestionFormat;
    'optionInfo'?: OptionInfo;
    /**
    * Whether its compulsory to answer the question or not.
    */
    'isRequired': boolean = false;
    /**
    * Whether the question is disabled or not. If true, this should not be asked.
    */
    'isDisabled': boolean = true;
    /**
    * Whether to include this question in the itinerary related emails.
    */
    'includeInItinerary'?: boolean = false;
    'customFieldLocations'?: Array<CustomFieldLocation>;
    'matchConditions'?: CustomFieldMatchConditions;
    'questionType'?: QuestionType;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "questionFormat",
            "baseName": "questionFormat",
            "type": "QuestionFormat"
        },
        {
            "name": "optionInfo",
            "baseName": "optionInfo",
            "type": "OptionInfo"
        },
        {
            "name": "isRequired",
            "baseName": "isRequired",
            "type": "boolean"
        },
        {
            "name": "isDisabled",
            "baseName": "isDisabled",
            "type": "boolean"
        },
        {
            "name": "includeInItinerary",
            "baseName": "includeInItinerary",
            "type": "boolean"
        },
        {
            "name": "customFieldLocations",
            "baseName": "customFieldLocations",
            "type": "Array<CustomFieldLocation>"
        },
        {
            "name": "matchConditions",
            "baseName": "matchConditions",
            "type": "CustomFieldMatchConditions"
        },
        {
            "name": "questionType",
            "baseName": "questionType",
            "type": "QuestionType"
        }    ];

    static getAttributeTypeMap() {
        return Question.attributeTypeMap;
    }
}

export namespace Question {
}
