/**
 * Trip API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Commission } from './commission';
import { DateTimeLocal } from './dateTimeLocal';
import { ExchangeInfo1 } from './exchangeInfo1';
import { FareAmount } from './fareAmount';
import { FlightCoupon } from './flightCoupon';
import { ItemCTC } from './itemCTC';
import { LLFInfo } from './lLFInfo';
import { Money } from './money';
import { PaymentDetails } from './paymentDetails';
import { PnrTaxBreakdown } from './pnrTaxBreakdown';
import { RefundInfo } from './refundInfo';
import { TicketAncillary } from './ticketAncillary';
import { TicketExchangePolicy } from './ticketExchangePolicy';
import { TicketRefundPolicy } from './ticketRefundPolicy';
import { TicketScheduleChangeInformation } from './ticketScheduleChangeInformation';
import { UnusedCreditInfo } from './unusedCreditInfo';

/**
* Air ticket info
*/
export class Ticket {
    /**
    * Ticket number
    */
    'ticketNumber': string;
    /**
    * Ticket type
    */
    'ticketType'?: Ticket.TicketTypeEnum;
    /**
    * Date time when the ticket was issued
    */
    'issuedDateTime'?: DateTimeLocal;
    /**
    * Ticket status
    */
    'status'?: Ticket.StatusEnum;
    /**
    * Total amount of ticket
    */
    'amount'?: FareAmount;
    /**
    * List of flight coupons in this ticket
    */
    'flightCoupons'?: Array<FlightCoupon>;
    /**
    * List of ancillaries in this ticket
    */
    'ancillaries'?: Array<TicketAncillary>;
    /**
    * 2 letter IATA airline code for the validating/ticketing airline
    */
    'validatingAirlineCode'?: string;
    'exchangePolicy'?: TicketExchangePolicy;
    'exchangeInfo'?: ExchangeInfo1;
    'refundPolicy'?: TicketRefundPolicy;
    'refundInfo'?: RefundInfo;
    'llfInfo'?: LLFInfo;
    /**
    * Tax breakdown information for this ticket
    */
    'taxBreakdown'?: PnrTaxBreakdown;
    'commission'?: Commission;
    /**
    * Iata number
    */
    'iataNumber'?: string;
    /**
    * Fare calculation line
    */
    'fareCalculation'?: string;
    /**
    * Date time when the ticket was updated (voided, refunded or exchanged)
    */
    'updateDateTime'?: DateTimeLocal;
    /**
    * List of payment details for this ticket
    */
    'paymentDetails'?: Array<PaymentDetails>;
    /**
    * Ticket settlement
    */
    'ticketSettlement'?: Ticket.TicketSettlementEnum;
    'ticketCtc'?: ItemCTC;
    /**
    * Published fare for this ticket. This field can be used to find savings in case of corporate / private fare bookings. 
    */
    'publishedFare'?: FareAmount;
    /**
    * Merchant fee charged on this ticket
    */
    'merchantFee'?: Money;
    /**
    * Card or sevice fee charged by airline
    */
    'airlineFee'?: Money;
    /**
    * Cancellation id sent by the supplier.
    */
    'vendorCancellationId'?: string;
    /**
    * List of ticket suffix in case of multiple coupons in a single ticket from GDS
    */
    'conjunctionTicketSuffix'?: Array<string>;
    /**
    * Unused credit that was created by cancelling this ticket.
    */
    'createdUnusedCredit'?: UnusedCreditInfo;
    'ticketScheduleChangeInformation'?: TicketScheduleChangeInformation;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ticketNumber",
            "baseName": "ticketNumber",
            "type": "string"
        },
        {
            "name": "ticketType",
            "baseName": "ticketType",
            "type": "Ticket.TicketTypeEnum"
        },
        {
            "name": "issuedDateTime",
            "baseName": "issuedDateTime",
            "type": "DateTimeLocal"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Ticket.StatusEnum"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "FareAmount"
        },
        {
            "name": "flightCoupons",
            "baseName": "flightCoupons",
            "type": "Array<FlightCoupon>"
        },
        {
            "name": "ancillaries",
            "baseName": "ancillaries",
            "type": "Array<TicketAncillary>"
        },
        {
            "name": "validatingAirlineCode",
            "baseName": "validatingAirlineCode",
            "type": "string"
        },
        {
            "name": "exchangePolicy",
            "baseName": "exchangePolicy",
            "type": "TicketExchangePolicy"
        },
        {
            "name": "exchangeInfo",
            "baseName": "exchangeInfo",
            "type": "ExchangeInfo1"
        },
        {
            "name": "refundPolicy",
            "baseName": "refundPolicy",
            "type": "TicketRefundPolicy"
        },
        {
            "name": "refundInfo",
            "baseName": "refundInfo",
            "type": "RefundInfo"
        },
        {
            "name": "llfInfo",
            "baseName": "llfInfo",
            "type": "LLFInfo"
        },
        {
            "name": "taxBreakdown",
            "baseName": "taxBreakdown",
            "type": "PnrTaxBreakdown"
        },
        {
            "name": "commission",
            "baseName": "commission",
            "type": "Commission"
        },
        {
            "name": "iataNumber",
            "baseName": "iataNumber",
            "type": "string"
        },
        {
            "name": "fareCalculation",
            "baseName": "fareCalculation",
            "type": "string"
        },
        {
            "name": "updateDateTime",
            "baseName": "updateDateTime",
            "type": "DateTimeLocal"
        },
        {
            "name": "paymentDetails",
            "baseName": "paymentDetails",
            "type": "Array<PaymentDetails>"
        },
        {
            "name": "ticketSettlement",
            "baseName": "ticketSettlement",
            "type": "Ticket.TicketSettlementEnum"
        },
        {
            "name": "ticketCtc",
            "baseName": "ticketCtc",
            "type": "ItemCTC"
        },
        {
            "name": "publishedFare",
            "baseName": "publishedFare",
            "type": "FareAmount"
        },
        {
            "name": "merchantFee",
            "baseName": "merchantFee",
            "type": "Money"
        },
        {
            "name": "airlineFee",
            "baseName": "airlineFee",
            "type": "Money"
        },
        {
            "name": "vendorCancellationId",
            "baseName": "vendorCancellationId",
            "type": "string"
        },
        {
            "name": "conjunctionTicketSuffix",
            "baseName": "conjunctionTicketSuffix",
            "type": "Array<string>"
        },
        {
            "name": "createdUnusedCredit",
            "baseName": "createdUnusedCredit",
            "type": "UnusedCreditInfo"
        },
        {
            "name": "ticketScheduleChangeInformation",
            "baseName": "ticketScheduleChangeInformation",
            "type": "TicketScheduleChangeInformation"
        }    ];

    static getAttributeTypeMap() {
        return Ticket.attributeTypeMap;
    }
}

export namespace Ticket {
    export enum TicketTypeEnum {
        UnknownTicketType = <any> 'UNKNOWN_TICKET_TYPE',
        Flight = <any> 'FLIGHT',
        Ancillary = <any> 'ANCILLARY',
        Mixed = <any> 'MIXED'
    }
    export enum StatusEnum {
        Unknown = <any> 'UNKNOWN',
        Issued = <any> 'ISSUED',
        Voided = <any> 'VOIDED',
        Refunded = <any> 'REFUNDED',
        Exchanged = <any> 'EXCHANGED'
    }
    export enum TicketSettlementEnum {
        UnknownTicketSettlement = <any> 'UNKNOWN_TICKET_SETTLEMENT',
        ArcTicket = <any> 'ARC_TICKET',
        BspTicket = <any> 'BSP_TICKET',
        NonArcBspTicket = <any> 'NON_ARC_BSP_TICKET'
    }
}
