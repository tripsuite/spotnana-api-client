/**
 * Trip API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CO2EmissionDetail } from './cO2EmissionDetail';
import { Cabin } from './cabin';
import { DateTimeLocal } from './dateTimeLocal';
import { Duration } from './duration';
import { Equipment } from './equipment';
import { FlightNumber } from './flightNumber';
import { FlightRestrictions } from './flightRestrictions';
import { FlightUpdates } from './flightUpdates';
import { Gate } from './gate';
import { HiddenStop } from './hiddenStop';
import { Length } from './length';
import { OtherStatus } from './otherStatus';
import { PnrStatus } from './pnrStatus';

/**
* Flight info
*/
export class Flight {
    /**
    * Departure date time of flight
    */
    'departureDateTime': DateTimeLocal;
    /**
    * Arrival date time of flight
    */
    'arrivalDateTime': DateTimeLocal;
    /**
    * Flight duration
    */
    'duration'?: Duration;
    /**
    * 3 letter IATA airport code for origin
    */
    'origin': string;
    /**
    * 3 letter IATA airport code for destination
    */
    'destination': string;
    /**
    * Departure gate and terminal
    */
    'departureGate'?: Gate;
    /**
    * Arrival gate and terminal
    */
    'arrivalGate'?: Gate;
    /**
    * Marketing flight number
    */
    'marketing': FlightNumber;
    /**
    * Operating flight number
    */
    'operating': FlightNumber;
    /**
    * Free text operating airline name that has to be displayed to the user if present 
    */
    'operatingAirlineName'?: string;
    /**
    * Stops for refueling or getting more passengers
    */
    'hiddenStops'?: Array<HiddenStop>;
    /**
    * Flight confirmation number
    */
    'vendorConfirmationNumber'?: string;
    /**
    * Flight cabin
    */
    'cabin'?: Cabin;
    /**
    * Flight Booking Code
    */
    'bookingCode'?: string;
    /**
    * Status of flight
    */
    'flightStatus'?: PnrStatus;
    /**
    * Details about any duplicate flight segment. Cabin code and status of other duplicate  segments. 
    */
    'otherStatuses'?: Array<OtherStatus>;
    /**
    * CO2 emission info for this flight
    */
    'co2EmissionDetail'?: CO2EmissionDetail;
    /**
    * Restrictions such as seat booking, loyalty etc
    */
    'restrictions'?: Array<FlightRestrictions>;
    'flightUpdates'?: FlightUpdates;
    /**
    * Flight status code from supplier
    */
    'sourceStatus'?: string;
    'equipment'?: Equipment;
    'distance'?: Length;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "departureDateTime",
            "baseName": "departureDateTime",
            "type": "DateTimeLocal"
        },
        {
            "name": "arrivalDateTime",
            "baseName": "arrivalDateTime",
            "type": "DateTimeLocal"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "Duration"
        },
        {
            "name": "origin",
            "baseName": "origin",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "string"
        },
        {
            "name": "departureGate",
            "baseName": "departureGate",
            "type": "Gate"
        },
        {
            "name": "arrivalGate",
            "baseName": "arrivalGate",
            "type": "Gate"
        },
        {
            "name": "marketing",
            "baseName": "marketing",
            "type": "FlightNumber"
        },
        {
            "name": "operating",
            "baseName": "operating",
            "type": "FlightNumber"
        },
        {
            "name": "operatingAirlineName",
            "baseName": "operatingAirlineName",
            "type": "string"
        },
        {
            "name": "hiddenStops",
            "baseName": "hiddenStops",
            "type": "Array<HiddenStop>"
        },
        {
            "name": "vendorConfirmationNumber",
            "baseName": "vendorConfirmationNumber",
            "type": "string"
        },
        {
            "name": "cabin",
            "baseName": "cabin",
            "type": "Cabin"
        },
        {
            "name": "bookingCode",
            "baseName": "bookingCode",
            "type": "string"
        },
        {
            "name": "flightStatus",
            "baseName": "flightStatus",
            "type": "PnrStatus"
        },
        {
            "name": "otherStatuses",
            "baseName": "otherStatuses",
            "type": "Array<OtherStatus>"
        },
        {
            "name": "co2EmissionDetail",
            "baseName": "co2EmissionDetail",
            "type": "CO2EmissionDetail"
        },
        {
            "name": "restrictions",
            "baseName": "restrictions",
            "type": "Array<FlightRestrictions>"
        },
        {
            "name": "flightUpdates",
            "baseName": "flightUpdates",
            "type": "FlightUpdates"
        },
        {
            "name": "sourceStatus",
            "baseName": "sourceStatus",
            "type": "string"
        },
        {
            "name": "equipment",
            "baseName": "equipment",
            "type": "Equipment"
        },
        {
            "name": "distance",
            "baseName": "distance",
            "type": "Length"
        }    ];

    static getAttributeTypeMap() {
        return Flight.attributeTypeMap;
    }
}

export namespace Flight {
}
